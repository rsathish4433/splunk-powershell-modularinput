<dashboard>
  <label>Installation</label>
  <row>
    <html><![CDATA[
<h1>Splunk Add-on for PowerShell</h1>

<p>The Splunk Add-on for PowerShell provides a single-instance multi-threaded 
PowerShell mini-host which executes PowerShell scripts as a data input 
mechanism for Splunk.  It is implemented as a Splunk Modular Input and 
requires Splunk 5.0.2 or later to run.</p>
<p>The modular input is multi-threaded, so many PowerShell stanzas can be 
defined and run simultaneously, with the output from each script going to 
the correct indices with soruce and sourcetypes defined properly.  It also 
provides scheduling so that the scripts can be run on a recurring schedule 
with the full complexity and power of cron scheduling.</p>
<p>To define a PowerShell data input, use the powershell type in an inputs.conf
stanza.  A simple example is as follows:</p>
<code><pre>
[powershell://Services]
scripts=Get-Service|Select Name,DisplayName,Status
scehdule=0 0/15 * ? * *
index=main
source=powershell
sourcetype=Windows:Service
</pre></code>
<p>See the <a href="examples">Examples</a> page for more examples.</p>
<p>The host automatically converts all public properties that can be converted 
to strings into key="value" pairs and packages the output into an event for 
Splunks use.</p>

<h2>Requirements</h2>
<p>The Splunk Add-on for PowerShell requires the .NET Framework 4.5 and 
PowerShell 3.0 to be installed on the host executing the modular input.
This means that only Windows Server 2008 or newer (including Windows 7 and
Windows 8) are supported.  The following download locations can be used to
download the .NET Framework 4.5 and the Windows Management Framework that
contains PowerShell 3.0.</p>

<ul>
<li><a href="http://www.microsoft.com/en-us/download/details.aspx?id=34595">Windows Management Framework 3.0</a></li>
<li><a href="http://www.microsoft.com/en-us/download/details.aspx?id=30653">.NET Framework 4.5</a></li>
</ul>

<h2>Installing the Add-on</h2>
<p>Before using a powershell data input, you must deploy the 
SA-ModInput-PowerShell app on each Windows host that you will 
gather data from.  The best method of doing this is to use the 
Splunk Deployment Server.  To do this:</p>

<ol>
<li>Unpack the SA-ModInput-PowerShell app into $SPLUNK_HOME/etc/deployment-apps</li>
<li>Create a suitable serverclass.conf file in $SPLUNK_HOME/etc/system/local</li>
<li>Restart the splunk server to start the deployment server</li>
<li>Configure your Windows hosts with a deploymentclient.conf</li>
</ol>

<p>A serverclass.conf file snippet for deploying the SA-ModInput-PowerShell 
app is shown below:</p>

<code><pre>
[serverClass:powershell]
whitelist.0 = *
machineTypesFilter = windows-*
restartSplunkd = true

[serverClass:powershell:app:SA-ModInput-PowerShell]
</pre></code>

<p>For more information regarding using the deployment server to manage your 
Splunk Universal Forwarders, refer to the <a href="http://docs.splunk.com/Documentation/Splunk/latest/Deploy/Distributedoverview">Distributed Deployment Guide</a>.</p>

<h2>Configuring the Add-on</h2>

<p>Once the add-on is deployed to the Splunk Universal Forwarders, you can 
configure PowerShell inputs using stanzas in the inputs.conf file.  You can 
also use the Splunk Manager on a full Splunk installation.</p>

<p>Two fields must be present in the inputs.conf stanza - the script contains
an in-line PowerShell script.  Use dot-sourcing to include a script file:</p>

<code><pre>script = . "$SplunkHome\etc\apps\My-App\bin\health.ps1"</pre></code>

<p>The schedule is a standard cron-style schedule.  The seven fields are:</p>

<ul>
<li>Seconds</li>
<li>Minutes</li>
<li>Hours</li>
<li>Day of Month</li>
<li>Month</li>
<li>Day of Week</li>
<li>Year (optional)</li>
</ul>

<p>For a full reference to the syntax, please refer to the <a href="http://quartznet.sourceforge.net/tutorial/lesson_6.html">Quartz.NET documentation</a>.</p>

<p>By default, events are created with a source/sourcetype of powershell in the main index.</p>

<h2>Writing PowerShell Scripts</h2>
<p>When writing scripts for the Splunk Add-on for PowerShell, there are wuite
a few differences from scripts might normally run in PowerShell.  There is no
actual host provided, so you should not refer to $host, nor use Write-Host or
Out-Host.  Everything you want to end up in an event should be written with 
Write-Output.  Errors should be written with Write-Error.</p>

<p>Since the Splunk Add-on for PowerShell is a single process running multiple
threads, environment variables are shared between scripts.  This includes the
$env:CWD current working directory.</p>

<p>The Modular Input includes a PowerShell Module called LocalStorage which is pre-loaded for you.  It exposes three cmdlets:</p>

<ul>
<li><b>Get-LocalStoragePath</b> returns the splunk checkpoint directory</li>
<li><b>Export-LocalStorage</b> exports an object to the checkpoint directory</li>
<li><b>Import-LocalStorage</b> imports an object from the checkpoint directory</li>
</ul>

<p>You may use these cmdlets to maintain state between successive runs of your
script.</p>

<h3>Specifying Paths</h3>
<p>The following read-only PowerShell variables are available to you when 
specifying a script in inputs.conf and within your script:</p>

<ul>
<li><b>SplunkHome</b> - the root directory for splunk's installed location (useful for appending /etc/apps/ paths to)</li>
<li><b>SplunkServerName</b> - the name configured for this machine to use in events</li>
<li><b>SplunkServerUri</b> - the address of Splunk's REST API</li>
<li><b>SplunkSessionKey</b> - the session key is the authentication token needed for accessing Splunk's REST API</li>
<li><b>SplunkCheckpointPath</b> - the path for storing persistent state</li>
<li><b>SplunkServerHost</b> - the name of the splunk server executing the modular input</li>
<li><b>SplunkStanzaName</b> - the name of the inputs.conf stanza that defined this script</li>
</ul>

<h3>Output</h3>
<p>The Splunk Add-on for PowerShell does not process the output until your pipeline and runspace are finished.  This means it does not process script properties.  You should also avoid long-running scripts.  Particularly, you should not write scripts that wait for things to happen unless you exit every time there is output.  All output has the same time stamp unless you override it (see below).</p>
<p>Each object that is output by your script is turned into an event in Splunk.  The properties of each object will be converted to key="value" strings.  The value is always a quoted script and will be converted by calling .ToString() on the property.  This generally means the output must be simple and complex nested objects should be flattened within your script.</p>
<>There are a few special property names which have significance for the event and allow you to override the defaults defined in the inputs.conf stanza:</p>
<ul>
<li><b>SplunkIndex</b> - Overrides the index that the output will be stored in</li>
<li><b>SplunkSourc</b>  - Overrides the "source" for the ouput</li>
<li><b>SplunkHos</b>  - Overrides the "host" name for the output</li>
<li><b>SplunkSourceTyp</b>  - Overrides the "sourcetype" for the output</li>
<li><b>SplunkTim</b>  - Overrides the "time" -- if you don't specify this, all objects output by your script in a single execution will get roughly the same timestamp, because they're held for output until the script execution is finished, and then marked with the output time.</li>
</ul>

<p>These properties will never show up in the key="value" output.</p>

<p><b>NOTE</b>: If you wish to set these properties and override the defaults, you should either use a calculated expressions with Select-Object or use Add-Member to add a NoteProperty.</p>


    ]]></html>
  </row>
</dashboard>
